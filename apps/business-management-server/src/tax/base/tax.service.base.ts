/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Tax as PrismaTax } from "@prisma/client";

export class TaxServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TaxCountArgs, "select">): Promise<number> {
    return this.prisma.tax.count(args);
  }

  async taxes<T extends Prisma.TaxFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxFindManyArgs>
  ): Promise<PrismaTax[]> {
    return this.prisma.tax.findMany<Prisma.TaxFindManyArgs>(args);
  }
  async tax<T extends Prisma.TaxFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxFindUniqueArgs>
  ): Promise<PrismaTax | null> {
    return this.prisma.tax.findUnique(args);
  }
  async createTax<T extends Prisma.TaxCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxCreateArgs>
  ): Promise<PrismaTax> {
    return this.prisma.tax.create<T>(args);
  }
  async updateTax<T extends Prisma.TaxUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxUpdateArgs>
  ): Promise<PrismaTax> {
    return this.prisma.tax.update<T>(args);
  }
  async deleteTax<T extends Prisma.TaxDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxDeleteArgs>
  ): Promise<PrismaTax> {
    return this.prisma.tax.delete(args);
  }
}
