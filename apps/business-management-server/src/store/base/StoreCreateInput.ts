/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested } from "class-validator";
import { CustomerCreateNestedManyWithoutStoresInput } from "./CustomerCreateNestedManyWithoutStoresInput";
import { Type } from "class-transformer";
import { DiscountCreateNestedManyWithoutStoresInput } from "./DiscountCreateNestedManyWithoutStoresInput";
import { EmployeeCreateNestedManyWithoutStoresInput } from "./EmployeeCreateNestedManyWithoutStoresInput";
import { OrderCreateNestedManyWithoutStoresInput } from "./OrderCreateNestedManyWithoutStoresInput";
import { PaymentTypeCreateNestedManyWithoutStoresInput } from "./PaymentTypeCreateNestedManyWithoutStoresInput";
import { ProductCreateNestedManyWithoutStoresInput } from "./ProductCreateNestedManyWithoutStoresInput";

@InputType()
class StoreCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  businessDescription?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  businessName?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  businessPhoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  businessSector?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  country?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  currency?: string | null;

  @ApiProperty({
    required: false,
    type: () => CustomerCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => CustomerCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => CustomerCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  customers?: CustomerCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => DiscountCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => DiscountCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => DiscountCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  discounts?: DiscountCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => EmployeeCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => EmployeeCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => EmployeeCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  employees?: EmployeeCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  logoUrl?: string | null;

  @ApiProperty({
    required: false,
    type: () => OrderCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => OrderCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => OrderCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  orders?: OrderCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => PaymentTypeCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => PaymentTypeCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => PaymentTypeCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  paymentTypes?: PaymentTypeCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  primaryAddress?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProductCreateNestedManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => ProductCreateNestedManyWithoutStoresInput)
  @IsOptional()
  @Field(() => ProductCreateNestedManyWithoutStoresInput, {
    nullable: true,
  })
  products?: ProductCreateNestedManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  state?: string | null;
}

export { StoreCreateInput as StoreCreateInput };
