/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaymentTypeService } from "../paymentType.service";
import { PaymentTypeCreateInput } from "./PaymentTypeCreateInput";
import { PaymentType } from "./PaymentType";
import { PaymentTypeFindManyArgs } from "./PaymentTypeFindManyArgs";
import { PaymentTypeWhereUniqueInput } from "./PaymentTypeWhereUniqueInput";
import { PaymentTypeUpdateInput } from "./PaymentTypeUpdateInput";

export class PaymentTypeControllerBase {
  constructor(protected readonly service: PaymentTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentType })
  async createPaymentType(
    @common.Body() data: PaymentTypeCreateInput
  ): Promise<PaymentType> {
    return await this.service.createPaymentType({
      data: {
        ...data,

        store: data.store
          ? {
              connect: data.store,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentType] })
  @ApiNestedQuery(PaymentTypeFindManyArgs)
  async paymentTypes(@common.Req() request: Request): Promise<PaymentType[]> {
    const args = plainToClass(PaymentTypeFindManyArgs, request.query);
    return this.service.paymentTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paymentType(
    @common.Param() params: PaymentTypeWhereUniqueInput
  ): Promise<PaymentType | null> {
    const result = await this.service.paymentType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaymentType(
    @common.Param() params: PaymentTypeWhereUniqueInput,
    @common.Body() data: PaymentTypeUpdateInput
  ): Promise<PaymentType | null> {
    try {
      return await this.service.updatePaymentType({
        where: params,
        data: {
          ...data,

          store: data.store
            ? {
                connect: data.store,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaymentType(
    @common.Param() params: PaymentTypeWhereUniqueInput
  ): Promise<PaymentType | null> {
    try {
      return await this.service.deletePaymentType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
