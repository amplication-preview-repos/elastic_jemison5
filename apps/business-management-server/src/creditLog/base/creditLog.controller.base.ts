/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditLogService } from "../creditLog.service";
import { CreditLogCreateInput } from "./CreditLogCreateInput";
import { CreditLog } from "./CreditLog";
import { CreditLogFindManyArgs } from "./CreditLogFindManyArgs";
import { CreditLogWhereUniqueInput } from "./CreditLogWhereUniqueInput";
import { CreditLogUpdateInput } from "./CreditLogUpdateInput";

export class CreditLogControllerBase {
  constructor(protected readonly service: CreditLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditLog })
  async createCreditLog(
    @common.Body() data: CreditLogCreateInput
  ): Promise<CreditLog> {
    return await this.service.createCreditLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditLog] })
  @ApiNestedQuery(CreditLogFindManyArgs)
  async creditLogs(@common.Req() request: Request): Promise<CreditLog[]> {
    const args = plainToClass(CreditLogFindManyArgs, request.query);
    return this.service.creditLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditLog(
    @common.Param() params: CreditLogWhereUniqueInput
  ): Promise<CreditLog | null> {
    const result = await this.service.creditLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditLog(
    @common.Param() params: CreditLogWhereUniqueInput,
    @common.Body() data: CreditLogUpdateInput
  ): Promise<CreditLog | null> {
    try {
      return await this.service.updateCreditLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditLog(
    @common.Param() params: CreditLogWhereUniqueInput
  ): Promise<CreditLog | null> {
    try {
      return await this.service.deleteCreditLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
