/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CreditLog as PrismaCreditLog } from "@prisma/client";

export class CreditLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreditLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creditLog.count(args);
  }

  async creditLogs<T extends Prisma.CreditLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditLogFindManyArgs>
  ): Promise<PrismaCreditLog[]> {
    return this.prisma.creditLog.findMany<Prisma.CreditLogFindManyArgs>(args);
  }
  async creditLog<T extends Prisma.CreditLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditLogFindUniqueArgs>
  ): Promise<PrismaCreditLog | null> {
    return this.prisma.creditLog.findUnique(args);
  }
  async createCreditLog<T extends Prisma.CreditLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditLogCreateArgs>
  ): Promise<PrismaCreditLog> {
    return this.prisma.creditLog.create<T>(args);
  }
  async updateCreditLog<T extends Prisma.CreditLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditLogUpdateArgs>
  ): Promise<PrismaCreditLog> {
    return this.prisma.creditLog.update<T>(args);
  }
  async deleteCreditLog<T extends Prisma.CreditLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditLogDeleteArgs>
  ): Promise<PrismaCreditLog> {
    return this.prisma.creditLog.delete(args);
  }
}
